{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","square","line","Square","props","className","isWinSquare","onClick","value","Board","this","win","includes","row","j","push","renderSquare","renderSquares","Component","App","state","history","Array","fill","lastIndex","stepNumber","xIsNext","ascending","slice","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","reverse","handleClick","index","Math","floor","getPosition","handleSort","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3b92e61.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { Component } from \"react\";\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { square: squares[a], line: lines[i] };\n    }\n  }\n  return null;\n}\nfunction Square(props) {\n  let className = \"\";\n  if (props.isWinSquare) className = \" square-winner\";\n  return (\n    <button className={\"square\" + className} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends Component {\n  renderSquare(i) {\n    let isWinSquare = false;\n    if (this.props.win && this.props.win.includes(i)) isWinSquare = true;\n\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        isWinSquare={isWinSquare}\n      />\n    );\n  }\n  renderSquares() {\n    const size = 3;\n    let squares = [];\n    for (let i = 0; i < size; i++) {\n      let row = [];\n      for (let j = 0; j < size; j++) {\n        row.push(this.renderSquare(i * size + j));\n      }\n      squares.push(\n        <div key={i} className=\"board-row\">\n          {row}\n        </div>\n      );\n    }\n    return squares;\n  }\n\n  render() {\n    return <div>{this.renderSquares()}</div>;\n  }\n}\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n          lastIndex: null,\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      ascending: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          lastIndex: i,\n        },\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  handleSort() {\n    this.setState({\n      ascending: !this.state.ascending,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    let moves = history.map((step, move) => {\n      const desc = move ? \"Go to move #\" + move : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button\n            className={move === this.state.stepNumber ? \"selected-item\" : \"\"}\n            onClick={() => this.jumpTo(move)}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    });\n    if (!this.state.ascending) moves = moves.reverse();\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner.square;\n    } else {\n      if (this.state.stepNumber === 9) status = \"Draw\";\n      else status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    const getPosition = () => {\n      const index = current.lastIndex;\n      if (index !== null)\n        return `Position (col,row)=(${1 + (index % 3)}, ${\n          1 + Math.floor(index / 3)\n        })`;\n      return `Game start`;\n    };\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            win={winner !== null ? winner.line : null}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div>{getPosition()}</div>\n          <button onClick={() => this.handleSort()}>\n            {this.state.ascending === true\n              ? \"Desceding order\"\n              : \"Ascending order\"}\n          </button>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}